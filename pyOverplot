#!/usr/bin/python
import wx,os
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.backends.backend_wxagg import FigureCanvasWxAgg as FigureCanvas

from matplotlib.backends.backend_wx import NavigationToolbar2Wx
from pylab import figure, legend 
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.figure import Figure
from matplotlib.widgets import Cursor


def readfomo( fomofile ):
	draga, lifta, iters = [],[],[]
	if os.path.exists(fomofile):
		f = open(fomofile)
		lines = f.readlines()
		for line in lines:
			if len(line.split()) < 3:
				ct, lift, drag = 0,0.0,0.0
			elif ct == 1: 
				iters.append( int(float( line.split()[0] ) ) )
			elif ct == 2: 
				lift = lift + float(line.split()[2])    
			elif ct == 3:
				drag = drag + float(line.split()[4])
			elif ct == 4:
				lift = lift + float(line.split()[0])
				drag = drag + float(line.split()[1]) 
			elif ct == 5:
				draga.append(drag)
				lifta.append(lift)
			ct = ct + 1
	else: 
           print "File not found"
    	return iters, lifta, draga 


def readresid( residfile ):
	resid, iters = [],[]
	if os.path.exists(residfile):
		f = open(residfile)
		lines = f.readlines()
		for line in lines:
			iters.append( int(float( line.split()[1] ) ) )             
			resid.append( float( line.split()[2] ) )                    
	else: 
           print "File not found"
    	return iters, resid



# Define function that eliminates the outlier data points 
def elimout(array):
	avg = np.average(array)
	std = np.std(array)
	arrayn = []
	for i in range(len(array)):
		if array[i] < (avg + std) and array[i] > (avg - std):
			arrayn.append(array[i]) 
        return arrayn


# ------------------------------------------------------------------------
#   Have single class that contains the figure that results and mesh plots
#   will be displayed on.  
# ------------------------------------------------------------------------

class plotwindow( wx.Frame ):
    def __init__(self, parent):
        wx.Frame.__init__ ( self, parent, id = wx.ID_ANY, title = "Plot Window", pos = wx.DefaultPosition, size = wx.Size( 800,500 ), style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
#        self.Parent = parent
        self.Bind(wx.EVT_CLOSE, self.on_close)
        
        # Default figure size, this is part of the frame so when exiting, 
        # the figure does no go away, the frame is just hidden 
        self.fig = Figure(figsize = (14,7), dpi=80)
        self.fig.subplots_adjust(bottom=0.08)
        self.fig.subplots_adjust(top=0.95)
        self.fig.subplots_adjust(right=0.95)
        self.fig.subplots_adjust(left=0.08)
        self.fig.subplots_adjust(wspace=0.15)
        self.axes = self.fig.add_subplot(111)
        
        # Use canvas to embed figure in frame
        self.canvas = FigureCanvas(self, -1, self.fig)
        self.sizer = wx.BoxSizer(wx.VERTICAL)
        self.sizer.Add(self.canvas, 1, wx.LEFT | wx.TOP | wx.GROW)
        # connect mouse events to functions  
        self.fig.canvas.mpl_connect('button_press_event', self.onpick)
        self.fig.canvas.mpl_connect('scroll_event', self.onscroll)

        # can add a cursor if desired 
        # cursor=Cursor(self.axes, useblit=True, color='black', linewidth=1 )
        # self._widgets=[cursor]

        self.add_toolbar()  # comment this out for no matplotlib toolbar
        
        self.SetSizer(self.sizer)
        self.Fit()
        #self.Layout()
        
        
# ----------------------------------------------------------------------
#   Adds standard matplotlib toolbar to frame
# ----------------------------------------------------------------------

    def add_toolbar(self):
        self.toolbar = NavigationToolbar2Wx(self.canvas)
        self.toolbar.Realize()
        if wx.Platform == '__WXMAC__':
            # Mac platform (OSX 10.3, MacPython) does not seem to cope with
            # having a toolbar in a sizer. This work-around gets the buttons
            # back, but at the expense of having the toolbar at the top
            self.SetToolBar(self.toolbar)
        else:
            # On Windows platform, default window size is incorrect, so set
            # toolbar width to figure width.
            tw, th = self.toolbar.GetSizeTuple()
            fw, fh = self.canvas.GetSizeTuple()
            # By adding toolbar in sizer, we are able to put it at the bottom
            # of the frame - so appearance is closer to GTK version.
            # As noted above, doesn't work for Mac.
            self.toolbar.SetSize(wx.Size(fw, th))
            self.sizer.Add(self.toolbar, 0, wx.LEFT | wx.EXPAND)
        # update the axes menu on the toolbar
        self.toolbar.update()
              
# ------------------------------------------------------------------------
# Function that is called when mouse is clicked on figure
# ------------------------------------------------------------------------
        
    def onpick( self, event ):
        # see what button is pushed 
        if event.button == 1:    # Left mouse button 
            print 'Click Event 1'
            print event.xdata, event.ydata 
        elif event.button == 2:  # Middle mouse button  
            print 'Click Event 2'
            print self.canvas.ScreenToClient(wx.GetMousePosition())
        elif event.button == 3:  # Right mouse button 
            print 'Click Event 3'
            
            
            
# ------------------------------------------------------------------------
# Function that will zoom in and out using mouse wheel
# ------------------------------------------------------------------------

    def onscroll( self, event ):
        scale = 1.15 # How fast we want to zoom in and out 
        if event.button == 'down':
            factor = 1/scale
        elif event.button == 'up':
            factor = scale
            
        curr_xlim = self.axes.get_xlim()
        curr_ylim = self.axes.get_ylim()
    
        new_width = (curr_xlim[1]-curr_xlim[0])*factor
        new_height= (curr_ylim[1]-curr_ylim[0])*factor
    
        relx = (curr_xlim[1]-event.xdata)/(curr_xlim[1]-curr_xlim[0])
        rely = (curr_ylim[1]-event.ydata)/(curr_ylim[1]-curr_ylim[0])
    
        self.axes.set_xlim([event.xdata-new_width*(1-relx),
                    event.xdata+new_width*(relx)])
        self.axes.set_ylim([event.ydata-new_height*(1-rely),
                            event.ydata+new_height*(rely)])
        self.canvas.draw()

    def on_plot( self,x,y,xlabel,ylabel):
        self.axes.cla()
        self.axes.plot( x,y,linewidth=2 )
        self.axes.set_xlabel( xlabel )
        self.axes.set_ylabel( ylabel )
        self.canvas.draw()
      
# ------------------------------------------------------------------------
# Function that will hide class on exit of this window 
# ------------------------------------------------------------------------
      
    def on_close( self, event ):
        self.Hide() 

################  Main Frame of window ####################################


class MainFrame ( wx.Frame ):
    def __init__( self, parent ):
        wx.Frame.__init__( self, parent, id = wx.ID_ANY, 
                           title = "Residual and Fomoco plotter", pos = wx.DefaultPosition, 
                           size = wx.Size( 300,500 ),
                           style = wx.DEFAULT_FRAME_STYLE|wx.TAB_TRAVERSAL )
        self.Layout()


class MainApp(MainFrame):
    def __init__(self, parent):
        MainFrame.__init__(self, parent)
        
        BoxSizer01 = wx.BoxSizer( wx.VERTICAL )
        self.fileline    = wx.TextCtrl(self, -1,
            value='fomoco.out',
            size=wx.Size(250,-1),
            style=wx.TE_PROCESS_ENTER)
        self.example_text1 = wx.StaticText(self,label='Fomoco File')

        self.cfile_button  = wx.Button( self, wx.ID_ANY, "Browse",
                                       wx.DefaultPosition, wx.DefaultSize, 0 )        
        self.load_button   = wx.Button( self, wx.ID_ANY, "Plot",
                                       wx.DefaultPosition, wx.DefaultSize, 0 )
        self.example_text2 = wx.StaticText(self,label='Select what to plot')
        self.checklift       = wx.CheckBox(self, -1, label = "Lift")  
        self.checkdrag       = wx.CheckBox(self, -1, label = "Drag")  
        self.lift_label      = wx.StaticText(self, -1 , label= " ")
        self.drag_label      = wx.StaticText(self, -1 , label= " ")        
    
        self.fileline2    = wx.TextCtrl(self, -1,
            value='resid.out',
            size=wx.Size(250,-1),
            style=wx.TE_PROCESS_ENTER)
        self.example_text3 = wx.StaticText(self,label='Resid File')

        self.cfile_button2  = wx.Button( self, wx.ID_ANY, "Browse",
                                       wx.DefaultPosition, wx.DefaultSize, 0 )        
        self.load_button2   = wx.Button( self, wx.ID_ANY, "Plot",
                                       wx.DefaultPosition, wx.DefaultSize, 0 )                       
                  # Set up how everything is laid out 
        hbox1  = wx.BoxSizer( wx.HORIZONTAL )  
        hbox1.Add( self.cfile_button, wx.ALIGN_CENTER | wx.ALL, 5 )          
        hbox1.Add( self.load_button,  wx.ALIGN_CENTER | wx.ALL, 5 )  
    
        hbox2  = wx.BoxSizer( wx.HORIZONTAL )  
        hbox2.Add( self.cfile_button2, wx.ALIGN_CENTER | wx.ALL, 5 )          
        hbox2.Add( self.load_button2,  wx.ALIGN_CENTER | wx.ALL, 5 )      
    
        vbox1  = wx.BoxSizer( wx.VERTICAL )
        #vbox1.AddSpacer(10)
        vbox1.Add(self.example_text1, 0, wx.ALIGN_CENTER | wx.ALL, 1)    
        vbox1.Add(self.fileline,      0, wx.ALIGN_CENTER | wx.ALL, 1)   
        vbox1.AddSpacer(5) 
        vbox1.Add(hbox1,              0, wx.ALIGN_CENTER | wx.ALL, 1) 
        vbox1.AddSpacer(10) 
        vbox1.Add(self.example_text2, 0, wx.ALIGN_CENTER | wx.ALL, 1)    
        vbox1.Add(self.checklift,     0, wx.ALIGN_CENTER | wx.ALL, 1) 
        vbox1.Add(self.checkdrag,     0, wx.ALIGN_CENTER | wx.ALL, 1) 
        vbox1.AddSpacer(10) 
        vbox1.Add(self.lift_label,    0, wx.ALIGN_LEFT   | wx.ALL, 1)
        vbox1.Add(self.drag_label,    0, wx.ALIGN_LEFT   | wx.ALL, 1)
        vbox1.AddSpacer(20)
        vbox1.Add(self.example_text3, 0, wx.ALIGN_CENTER | wx.ALL, 1)    
        vbox1.Add(self.fileline2,      0, wx.ALIGN_CENTER | wx.ALL, 1)   
        vbox1.AddSpacer(5) 
        vbox1.Add(hbox2,              0, wx.ALIGN_CENTER | wx.ALL, 1)     
        
        
        self.checklift.SetValue( True )
 
                        
        #
        BoxSizer01.Add( vbox1, 0, wx.ALIGN_CENTER | wx.ALL, 25 )
        
        self.cfile_button.Bind( wx.EVT_BUTTON,   self.sel_file     )
        self.load_button.Bind(  wx.EVT_BUTTON,   self.on_plot_ld   )
        self.checklift.Bind(    wx.EVT_CHECKBOX, self.on_check_l   )
        self.checkdrag.Bind(    wx.EVT_CHECKBOX, self.on_check_d   )
        self.cfile_button2.Bind( wx.EVT_BUTTON,   self.sel_file2     )
        self.load_button2.Bind(  wx.EVT_BUTTON,   self.on_plot_r   )
                
        self.SetSizer( BoxSizer01 ) 
        self.Layout()
        # declare plot window class
        self.plotwin  = PlotWindow(self)      


#----------------------------------------------------------------------------
    def on_check_l(self,event):
        if self.checklift.GetValue():            
            self.checkdrag.SetValue( False )
        else:
            self.checkdrag.SetValue( True  ) 
            
    def on_check_d(self,event):
        if self.checkdrag.GetValue():            
            self.checklift.SetValue( False )
        else:
            self.checklift.SetValue( True  ) 

            
    def sel_file( self,event ):
	wildcard = "All files (*.*)|*.*"
	dialog = wx.FileDialog(None, "Choose a file", os.getcwd(), "", wildcard, wx.OPEN)	
	if dialog.ShowModal() == wx.ID_OK:
		self.fileline.SetValue(dialog.GetPath())
  
    def sel_file2( self,event ):
	wildcard = "All files (*.*)|*.*"
	dialog = wx.FileDialog(None, "Choose a file", os.getcwd(), "", wildcard, wx.OPEN)	
	if dialog.ShowModal() == wx.ID_OK:
		self.fileline2.SetValue(dialog.GetPath())
  
    def on_plot_ld( self,event ):
        self.plotwin.Show() 
        iters, lifta, draga = readfomo( self.fileline.GetValue() )
        tlift, tdrag = lifta,draga
        for i in range(5):
            tdrag = elimout(tdrag)
            tlift = elimout(tlift)                 
        alift,adrag = str(np.average(tlift)),str(np.average(tdrag))
        self.lift_label.SetLabel( ''.join(['Steady State Lift =   ', alift ]) )
        self.drag_label.SetLabel( ''.join(['Steady State Drag =   ', adrag ]) )
        if self.checklift.GetValue():  
            self.plotwin.on_plot( iters,lifta,'Iteration','Lift' )
        else: 
            self.plotwin.on_plot( iters,draga,'Iteration','Drag' )
            
    def on_plot_r( self,event ):
        self.plotwin.Show() 
        iters, resid = readresid( self.fileline2.GetValue() )
        self.plotwin.on_plot( iters,resid,'Iteration','Residule' )
  

class PlotWindow(plotwindow):
      def __init__(self, parent):
        plotwindow.__init__(self, parent)
        self.parent = parent       


if __name__ == "__main__":
    app = wx.App()
    window = MainApp(None)
    window.Show(True)
    app.MainLoop()
    
